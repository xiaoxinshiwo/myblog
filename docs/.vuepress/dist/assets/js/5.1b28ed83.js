(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{47:function(t,a,e){t.exports=e.p+"assets/img/java-memory.7f5a3e2d.png"},73:function(t,a,e){"use strict";e.r(a);var r=[function(){var t=this.$createElement,a=this._self._c||t;return a("h1",{attrs:{id:"从-string-str-new-string-“abc”-说开去"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#从-string-str-new-string-“abc”-说开去","aria-hidden":"true"}},[this._v("#")]),this._v(" 从 String str = new String(“abc”);说开去")])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"字面量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字面量","aria-hidden":"true"}},[this._v("#")]),this._v(" 字面量")]),a("p",[this._v("在计算机科学中，字面量（literal）是用于表达源代码中一个固定值的表示法（natation）。几乎所有计算机编程语言都具有对基本值的字面量表示，诸如：整数、浮点数以及字符串；而有很多也对布尔类型和字符类型的值也支持字面量表示；还有一些甚至对枚举类型的元素以及像数组、记录和对象等符合类型的值也支持字面量表示法")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"常量池"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常量池","aria-hidden":"true"}},[this._v("#")]),this._v(" 常量池")]),a("ol",[a("li",[this._v("常量池表（constant_pool table）\nClass文件中存储所有常量（包括字符串）的table\n这是Class文件中的内容，还不是运行时的内容，不要理解它是个池子，其实就是Class文件中的字节码指令")]),a("li",[this._v("运行时常量池（Runtime Constant Pool）\nJVM内存中方法区的一部分，这是运行时的内容\n这部分内容（绝大部分）是随着JVM运行时候，从常量池转化而来，每个Class对应一个运行时常量池\n2中说绝大部分是因为：除了 Class中常量池内容，还可能包括动态生成并加入这里的内容")]),a("li",[this._v("字符串常量池（String Pool）\n这部分也在方法区中，但与Runtime Constant Pool不是一个概念，String Pool是JVM实例全局共享的，全局只有一个\nJVM规范要求进入这里的String实例叫“被驻留的interned string”，各个JVM可以有不同的实现，HotSpot是设置了一个哈希表StringTable来引用堆中的字符串实例，被引用就是被驻留")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"stack栈内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#stack栈内存","aria-hidden":"true"}},[this._v("#")]),this._v(" stack栈内存")]),a("p",[this._v("当程序被编译时分配内存。\n存放局部变量、参数、和基本类型的常量。\n自动管理内存的释放和创建。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"head堆内存"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#head堆内存","aria-hidden":"true"}},[this._v("#")]),this._v(" head堆内存")]),a("p",[this._v("程序运行时分配内存。\n存放new的对象这个区域也是经常讨论的需要GC的地方。\nheap分为新生代、老年代。\n新生代分为Eden区+2个Survivor区，每次使用Eden和其中一块Survivor。当发生Minor GC时会将\nEden和Survivor中存活的放在另外一个Survivor区。如果这个Survivor区空间不够且老年代够的话\n这部分对象会被直接复制到老年代。如果老年代也不够则会发生Full GC，Full GC后空间仍不够则会发生OutOfMemoryError。\n大对象直接存入老年代。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"永久代"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#永久代","aria-hidden":"true"}},[this._v("#")]),this._v(" 永久代")]),a("p",[this._v("永久代不是heap的一部分，不会发生GC。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("blockquote",[a("h3",{attrs:{id:"静态区-方法区"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态区-方法区","aria-hidden":"true"}},[this._v("#")]),this._v(" 静态区/方法区")]),a("p",[this._v("存放所有的class和static变量\nJVM内存分配过程\n"),a("img",{attrs:{src:e(47),alt:"java内存管理"}})])])},function(){var t=this.$createElement,a=this._self._c||t;return a("ol",[a("li",[a("p",[this._v('出现了字面量"abc"，那么去String Pool中查找是否有相同字符串存在，因为程序就这一行代码所以肯定没有，那么就在Java Heap中用字面量"abc"首先创建1个String对象')])]),a("li",[a("p",[this._v("new String(“abc”)，关键字new又在Java Heap中创建了1个对象，然后调用接收String参数的构造器进行了初始化。最终str的引用是这个String对象")])])])}],s=e(0),n=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("div",{staticClass:"content"},[t._m(0),e("authorAndTime",{attrs:{dateTime:"2018-05-01 09:49:56"}}),e("p",[t._v("java面试时经常会有这道题：String str = new String(“abc”);创建了几个对象?\n要弄明白这个问题，需要先了解下面几个关键字：字面量 常量池  Stack Heap\n基本概念")]),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),e("p",[t._v("解析")]),t._m(7),e("p",[t._v("参考：《深入理解JAVA虚拟机》–周志明")])],1)},r,!1,null,null,null);a.default=n.exports}}]);