(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{61:function(n,t,e){"use strict";e.r(t);var a=e(0),i=Object(a.a)({},function(){var n=this,t=n.$createElement,e=n._self._c||t;return e("div",{staticClass:"content"},[n._m(0),e("authorAndTime",{attrs:{dateTime:"2018-05-17 18:51:15"}}),n._m(1),n._m(2),n._m(3),e("p",[n._v("编写model编写需要参数校验的bean:")]),n._m(4),e("p",[n._v("@Gender为自定义限制注解，代码如下：")]),n._m(5),n._m(6),e("p",[n._v("编写service，在需要参数校验的方法参数中增加校验注解，方法的参数如果为基本数据类型需要转换为包装类型。")]),n._m(7),e("p",[n._v("编写实现类，注意：实现类中的方法参数上不能加注解")]),n._m(8),e("p",[n._v("编写controller进行测试")]),n._m(9),e("p",[n._v("调用测试接口http://127.0.0.1:7788/student/addOne返回结果如下：")]),n._m(10),n._m(11)],1)},[function(){var n=this.$createElement,t=this._self._c||n;return t("h1",{attrs:{id:"在项目中通过切面统一进行参数校验"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#在项目中通过切面统一进行参数校验","aria-hidden":"true"}},[this._v("#")]),this._v(" 在项目中通过切面统一进行参数校验")])},function(){var n=this.$createElement,t=this._self._c||n;return t("blockquote",[t("p",[this._v("一直以来项目中的参数校验零零散散，散布在controller或者service的方法的开始部分。统一处理可以使代码优雅高效。"),t("br"),this._v("\n另外参数校验在controller做还是service做呢？个人觉得service层才最合理，因为service可以复用。")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("下面我们来看看怎么在service层加入切面，在切面上如何进行参数校验吧。"),t("br"),this._v("\n引入依赖:")])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("<dependency>\n  <groupId>org.hibernate.validator</groupId>\n  <artifactId>hibernate-validator</artifactId>\n  <version>6.0.10.Final</version>\n</dependency>\n<dependency>\n  <groupId>org.glassfish</groupId>\n  <artifactId>javax.el</artifactId>\n  <version>3.0.1-b09</version>\n</dependency\n")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package com.xiaoxin.validator.model;\n\nimport com.xiaoxin.validator.annotation.Gender;\nimport lombok.Getter;\nimport lombok.Setter;\nimport lombok.ToString;\nimport org.hibernate.validator.constraints.Length;\nimport org.springframework.format.annotation.DateTimeFormat;\n\nimport javax.validation.constraints.*;\nimport java.util.Date;\n\n/**\n * @Auther zhangyongxin\n * @date 2018/5/17 上午10:14\n */\n@Getter\n@Setter\n@ToString\npublic class Student {\n    @NotNull(message = "姓名不能为空")\n    private String name;\n    //自定义注解限制为 枚举类型 0、1\n    @Gender\n    private int gender;\n    @Length(min=19,max=19,message = "身份证号只能为19位")\n    private String identityId;\n    @Pattern(regexp="^(1)\\\\d{10}$", message="请输入正确的手机号")\n    private String phoneNumber;\n    @Email(message = "请输入正确的email地址")\n    private String email;\n    @Past(message = "生日不能大于当前时间")\n    @DateTimeFormat(pattern = "yyyMMdd")\n    private Date birthDay;\n    @Max(value = 130,message = "年龄不能超过130岁")\n    private int age;\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package com.xiaoxin.validator.annotation;\n\nimport com.xiaoxin.validator.GenderValidator;\n\nimport javax.validation.Constraint;\nimport javax.validation.Payload;\nimport java.lang.annotation.*;\n\n/**\n * 自定义注解，性别只能为0、1\n * @Auther zhangyongxin\n * @date 2018/5/17 上午10:57\n */\n@Target( { ElementType.ANNOTATION_TYPE, ElementType.METHOD, ElementType.FIELD })\n@Documented\n@Retention(RetentionPolicy.RUNTIME)\n@Constraint(validatedBy = {GenderValidator.class})\npublic @interface Gender {\n\n    String message() default "性别只能为0：女 1：男";\n\n    Class<?>[] groups() default {};\n    Class<? extends Payload>[] payload() default {};\n\n}\n\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v("package com.xiaoxin.validator;\n\nimport com.xiaoxin.validator.annotation.Gender;\n\nimport javax.validation.ConstraintValidator;\nimport javax.validation.ConstraintValidatorContext;\nimport java.util.Arrays;\n\n/**\n * 自定义注解相关的validator；性别只能为 0、1\n * @Auther zhangyongxin\n * @date 2018/5/17 上午10:59\n */\npublic class GenderValidator implements ConstraintValidator<Gender, Integer> {\n    private final Integer[] ALL_GENDERS = {0,1};\n\n    @Override\n    public boolean isValid(Integer integer, ConstraintValidatorContext constraintValidatorContext) {\n\n        if (Arrays.asList(ALL_GENDERS).contains(integer)) {\n            return true;\n        }\n        return false;\n    }\n}\n\n")])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package com.xiaoxin.validator.service;\n\nimport com.xiaoxin.validator.model.Student;\nimport org.hibernate.validator.constraints.Length;\n\nimport javax.validation.constraints.Max;\n\n/**\n * @Auther zhangyongxin\n * @date 2018/5/17 上午11:04\n */\npublic interface StudentService {\n\n    Student addOneStudent(Student student,@Length(min=19,max=19)String identityId);\n\n    Student findOneStudent(String identityId);\n\n    void deleteOneStudent(@Length(min=19,max=19)String identityId);\n\n    void updateOneStudentAge(@Length(min=19,max=19)String identityId,\n                          @Max(value = 130,message = "年龄不能超过130岁") Integer age);\n\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package com.xiaoxin.aop;\n\nimport lombok.extern.slf4j.Slf4j;\nimport org.aspectj.lang.JoinPoint;\nimport org.aspectj.lang.ProceedingJoinPoint;\nimport org.aspectj.lang.annotation.Around;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.aspectj.lang.annotation.Pointcut;\nimport org.hibernate.validator.HibernateValidator;\nimport org.springframework.stereotype.Component;\n\nimport javax.validation.ConstraintViolation;\nimport javax.validation.Validation;\nimport javax.validation.Validator;\nimport javax.validation.ValidatorFactory;\nimport javax.validation.executable.ExecutableValidator;\nimport java.lang.reflect.Method;\nimport java.util.HashSet;\nimport java.util.ResourceBundle;\nimport java.util.Set;\n\n/**\n * 参数的校验分为 bean的校验和其他类型参数校验，需要分开对应。\n * 基本数据类型必须写成包装类型。\n * @Auther zhangyongxin\n * @date 2018/5/17 上午10:11\n */\n@Aspect\n@Component\n@Slf4j\npublic class ParameterValidationAspect {\n\n    @Around("execution(public * com.xiaoxin..*.service..*.*(..))")\n    public Object validateParameters(ProceedingJoinPoint joinPoint) throws Throwable {\n        String className = joinPoint.getSignature().getDeclaringType().getSimpleName();\n        String methodName = joinPoint.getSignature().getName();\n        Object[] args = joinPoint.getArgs();\n        log.info("ParameterValidationAspect before " + className + "." + methodName);\n        if (null != args && args.length > 0) {\n            ValidatorFactory validatorFactory = Validation.byProvider(HibernateValidator.class).configure().buildValidatorFactory();\n            ExecutableValidator validator = validatorFactory.getValidator().forExecutables();\n            Validator beanValidator = validatorFactory.getValidator();\n            Set<ConstraintViolation<Object>> violations = new HashSet<>();\n            Class clazz = joinPoint.getSignature().getDeclaringType();\n            Class[] classTypes = new Class[args.length];\n            // 因为此处获取不带基本类型的数据类型，只能获取对应的包装类型，所以在service层需要写基本类型对应的包装类型的参数\n            for (int i=0;i<args.length;i++) {\n                classTypes[i] = args[i].getClass();\n            }\n            Method method = clazz.getMethod(methodName,classTypes);\n            // 非java bean的参数校验\n            violations.addAll(validator.validateParameters(clazz.newInstance(),method,args));\n            // java Bean的参数校验\n            for (Object object : args) {\n                violations.addAll(beanValidator.validate(object));\n            }\n            dealWithValidations(violations);\n        }\n        return joinPoint.proceed();\n\n    }\n\n    private void dealWithValidations(Set<ConstraintViolation<Object>> violations) {\n        if (violations.size() > 0) {\n            StringBuffer buf = new StringBuffer();\n            for (ConstraintViolation<Object> violation : violations) {\n                buf.append("-" + violation.getPropertyPath().toString());\n                buf.append(violation.getMessage() + "<br/>\\n");\n            }\n            throw new IllegalArgumentException(buf.toString());\n        }\n    }\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('package com.xiaoxin.validator.controller;\n\nimport com.xiaoxin.validator.model.Result;\nimport com.xiaoxin.validator.model.ResultGenerator;\nimport com.xiaoxin.validator.model.Student;\nimport com.xiaoxin.validator.service.StudentService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.validation.BindingResult;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotEmpty;\nimport java.util.Date;\n\n/**\n * @Auther zhangyongxin\n * @date 2018/5/17 上午11:51\n */\n@RestController\n@RequestMapping("student")\npublic class StudentController {\n    @Autowired\n    private StudentService studentService;\n\n    @PostMapping("/addOne")\n    public Result addOneStudent(){\n        Student student = new Student();\n        student.setBirthDay(new Date());\n        student.setEmail("123163.com");\n        student.setGender(0);\n        student.setPhoneNumber("13987654320");\n        student.setName("韩梅");\n        student.setIdentityId("3412041900000000000");\n        student = studentService.addOneStudent(student,"");\n        return new Result(student);\n    }\n\n    @PostMapping("/addOneStudent")\n    public Result addOneStudent(@RequestBody @Valid Student student, BindingResult bindingResult){\n\n        /**\n         * 参数校验\n         */\n        if(bindingResult.hasErrors()){\n            return ResultGenerator.genValidationResult(bindingResult);\n        }\n        return new Result(studentService.addOneStudent(student,"3412041900000000000"));\n    }\n\n    @GetMapping("/findOne")\n    public Result findOneStudent(@NotEmpty String identityId){\n        Student student =  studentService.findOneStudent(identityId);\n        return new Result(student);\n    }\n\n    @PostMapping("/deleteOne")\n    public Result deleteOneStudent(@RequestBody String identityId){\n        studentService.deleteOneStudent(identityId);\n        return ResultGenerator.genSuccessResult();\n    }\n\n    @PostMapping("/updateAge")\n    public Result updateStudentAge(@RequestParam String identityId,@RequestParam int age){\n        studentService.updateOneStudentAge(identityId,age);\n        return ResultGenerator.genSuccessResult();\n    }\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[this._v('{\n"timestamp": "2018-05-17T11:13:42.651+0000",\n"status": 500,\n"error": "Internal Server Error",\n"message": "-email请输入正确的email地址<br/>\\n-addOneStudent.arg1长度需要在19和19之间<br/>\\n",\n"path": "/student/addOne"\n}\n')])])},function(){var n=this.$createElement,t=this._self._c||n;return t("p",[this._v("参考： "),t("a",{attrs:{href:"http://hibernate.org/validator/",target:"_blank",rel:"noopener noreferrer"}},[this._v("http://hibernate.org/validator/")])])}],!1,null,null,null);t.default=i.exports}}]);